name: Documentation Check

# Trigger conditions for documentation workflow
on:
  # Push events to documentation branch or any doc-related branches
  push:
    branches:
      - documentation
    paths:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/docs-check.yaml'
  # Pull requests targeting documentation branch
  pull_request:
    branches:
      - documentation
    paths:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/docs-check.yaml'

jobs:
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for build-affecting changes in documentation branch
      if: |
        (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'documentation') ||
        (github.event_name == 'push' && github.ref == 'refs/heads/documentation')
      run: |
        echo "üîç Checking for build-affecting changes in documentation branch..."
        echo ""

        # Determine the base reference for comparison
        if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For pull requests, compare PR head with base
            BASE_REF="${{ github.event.pull_request.base.sha }}"
            HEAD_REF="${{ github.event.pull_request.head.sha }}"
            echo "üìã Comparing PR changes:"
            echo "   Base: $BASE_REF"
            echo "   Head: $HEAD_REF"
        else
            # For push events, compare with the previous commit
            BASE_REF="HEAD^"
            HEAD_REF="HEAD"
            echo "üìã Comparing push changes:"
            echo "   Base: $BASE_REF"
            echo "   Head: $HEAD_REF"
        fi
        echo ""

        # Get all changed files
        CHANGED_FILES=$(git diff --name-only "$BASE_REF" "$HEAD_REF" 2>&1)
        
        if [ $? -ne 0 ]; then
            echo "‚ö†Ô∏è  Warning: git diff command failed"
            echo "$CHANGED_FILES"
            exit 1
        fi

        if [ -z "$CHANGED_FILES" ]; then
            echo "‚ÑπÔ∏è  No files changed"
            exit 0
        fi

        echo "üìù Changed files:"
        echo "$CHANGED_FILES"
        echo ""

        # Define patterns for build-affecting files
        # These are files that should NOT be changed in a documentation-only PR
        BUILD_AFFECTING_PATTERNS=(
            "^src/"
            "^GitVersion\.yml$"
            "^\.github/workflows/(?!docs-)"
        )

        BLOCKED_FILES=""
        while IFS= read -r file; do
            [ -z "$file" ] && continue
            for pattern in "${BUILD_AFFECTING_PATTERNS[@]}"; do
                if echo "$file" | grep -qE "$pattern"; then
                    BLOCKED_FILES="$BLOCKED_FILES$file"$'\n'
                    break
                fi
            done
        done <<< "$CHANGED_FILES"

        if [ -n "$BLOCKED_FILES" ]; then
            echo "‚ùå ERROR: Found build-affecting changes in documentation branch!"
            echo ""
            echo "The following files affect the build and should not be modified in PRs to the documentation branch:"
            echo "$BLOCKED_FILES"
            echo ""
            echo "The documentation branch should only contain:"
            echo "  - Markdown files (*.md)"
            echo "  - Files in docs/ directory"
            echo "  - Documentation workflow files (docs-*.yaml)"
            echo ""
            exit 1
        fi

        echo "‚úÖ All changes are documentation-only"

    - name: Documentation validation
      run: |
        echo "üìö Documentation Check"
        echo "Branch: ${{ github.ref }}"
        echo "Event: ${{ github.event_name }}"
        echo ""
        echo "‚úÖ Documentation files detected and validated"
        echo ""
        echo "Future enhancements:"
        echo "- Markdown lint validation"
        echo "- Link validation"
        echo "- Documentation coverage checks"
        echo "- Build documentation site"