---
# GitVersion Configuration
# This file controls semantic versioning behavior across different branches
# See https://gitversion.net/docs/ for full documentation

# Assembly versioning strategy
assembly-versioning-scheme: MajorMinorPatch
assembly-file-versioning-scheme: MajorMinorPatch
assembly-informational-format: '{InformationalVersion}'

# Versioning mode: ContinuousDeployment generates unique versions for every commit
mode: ContinuousDeployment

# Major/Minor version increment rules
# Set to manual to control version bumps via tags or commit messages
major-version-bump-message: '\+semver:\s?(breaking|major)'
minor-version-bump-message: '\+semver:\s?(feature|minor)'
patch-version-bump-message: '\+semver:\s?(fix|patch)'

# Commit date format for metadata
commit-date-format: 'yyyy-MM-dd'

# Ignore merge commits (except those that should trigger releases)
merge-message-formats: '^Merge (branch|tag|pull request)'

# Branch-specific configuration
branches:
  # Main branch: Production releases
  main:
    # Prevent version jumping when merging from develop
    # Version increments based on main's own version, not the merged branch
    prevent-increment:
      when-branch-merged: true
    increment: Patch
    is-main-branch: true
    regex: ^master$|^main$
    source-branches: ['develop', 'hotfix']

  # Develop branch: Integration branch for ongoing development
  develop:
    # Allow normal version increment from merged branches
    prevent-increment:
      when-branch-merged: false
    increment: Minor
    # Beta tag for development releases
    label: beta
    # Continuous deployment mode for every commit
    mode: ContinuousDeployment
    regex: ^dev(elop)?(ment)?$
    source-branches: ['feature', 'bugfix', 'hotfix']
    track-merge-target: false

  # Documentation branch: Documentation maintenance
  documentation:
    # Don't affect main version when merging documentation
    prevent-increment:
      when-branch-merged: true
    increment: Patch
    # Docs tag for documentation releases
    label: docs
    regex: ^docs?$|^documentation$
    source-branches: []

  # Feature branches: New features under development
  feature:
    increment: Minor
    # Alpha tag for feature development
    label: 'alpha.{BranchName}.{number}'
    regex: ^features?[/-](?<number>\d+)
    source-branches: ['develop']

  # Bugfix branches: Bug fixes under development
  bugfix:
    increment: Patch
    label: 'bugfix.{BranchName}'
    regex: ^bug(fix)?[/-]
    source-branches: ['develop']

  # Hotfix branches: Emergency fixes from production
  hotfix:
    increment: Patch
    label: hotfix
    regex: ^hotfix(es)?[/-]
    source-branches: ['main']
    is-main-branch: false

  # Pull request branches: CI validation
  pull-request:
    increment: Inherit
    label: 'pr{number}'
    # Use PR number in version (e.g., 1.1.0-pr.123)
    regex: ^(pull|pull\-requests|pr)[/-](?<number>\d+)

  # Release branches: Release preparation
  release:
    increment: None
    label: rc
    regex: ^releases?[/-]
    source-branches: ['develop']
    is-main-branch: false
    prevent-increment:
      when-branch-merged: true

# Ignore commits with these patterns (won't trigger version increment)
ignore:
  sha: []

# Workflow configuration for CI/CD
# Ensure GitVersion runs before build to inject version into assemblies
# continuous-delivery-fallback-label: ci

# Tag prefix (e.g., v1.0.0)
tag-prefix: 'v'
# Commit message increment rules
# Use commit messages like "feat: new feature +semver: minor" to control versioning
commit-message-incrementing: Enabled